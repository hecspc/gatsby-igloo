{"expireTime":9007200842491709000,"key":"gatsby-plugin-mdx-entire-payload-c3ca8dcff987abe2a86bf005148c8728-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"This is an example of a Component Page","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":42,"offset":42},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":42,"offset":42},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is similar to the other pages in that you can use Markdown/MDX, but it expects to find your component documentation in the ","position":{"start":{"line":4,"column":1,"offset":44},"end":{"line":4,"column":127,"offset":170},"indent":[]}},{"type":"inlineCode","value":"/components","position":{"start":{"line":4,"column":127,"offset":170},"end":{"line":4,"column":140,"offset":183},"indent":[]}},{"type":"text","value":" directory (although you can change that in your ","position":{"start":{"line":4,"column":140,"offset":183},"end":{"line":4,"column":189,"offset":232},"indent":[]}},{"type":"inlineCode","value":"gatsby-config.js","position":{"start":{"line":4,"column":189,"offset":232},"end":{"line":4,"column":207,"offset":250},"indent":[]}},{"type":"text","value":" file by setting the ","position":{"start":{"line":4,"column":207,"offset":250},"end":{"line":4,"column":228,"offset":271},"indent":[]}},{"type":"inlineCode","value":"componentLibPath","position":{"start":{"line":4,"column":228,"offset":271},"end":{"line":4,"column":246,"offset":289},"indent":[]}},{"type":"text","value":"). There is also support for showing components from a Storybook build. By default it is set to pull from the default Storybook build path (","position":{"start":{"line":4,"column":246,"offset":289},"end":{"line":4,"column":386,"offset":429},"indent":[]}},{"type":"inlineCode","value":"/storybook/iframe.html","position":{"start":{"line":4,"column":386,"offset":429},"end":{"line":4,"column":410,"offset":453},"indent":[]}},{"type":"text","value":"), but that is configurable in ","position":{"start":{"line":4,"column":410,"offset":453},"end":{"line":4,"column":441,"offset":484},"indent":[]}},{"type":"inlineCode","value":"gatsby-config.js","position":{"start":{"line":4,"column":441,"offset":484},"end":{"line":4,"column":459,"offset":502},"indent":[]}},{"type":"text","value":" by setting ","position":{"start":{"line":4,"column":459,"offset":502},"end":{"line":4,"column":471,"offset":514},"indent":[]}},{"type":"inlineCode","value":"UILibPath","position":{"start":{"line":4,"column":471,"offset":514},"end":{"line":4,"column":482,"offset":525},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":4,"column":482,"offset":525},"end":{"line":4,"column":483,"offset":526},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":44},"end":{"line":4,"column":483,"offset":526},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":6,"column":1,"offset":528},"end":{"line":6,"column":5,"offset":532},"indent":[]}},{"type":"inlineCode","value":"id","position":{"start":{"line":6,"column":5,"offset":532},"end":{"line":6,"column":9,"offset":536},"indent":[]}},{"type":"text","value":" for your component is the ID that Storybook uses to identify the component in their iframe, which is ","position":{"start":{"line":6,"column":9,"offset":536},"end":{"line":6,"column":111,"offset":638},"indent":[]}},{"type":"inlineCode","value":"COMPONENT_DIRECTORY--COMPONTENT_NAME","position":{"start":{"line":6,"column":111,"offset":638},"end":{"line":6,"column":149,"offset":676},"indent":[]}},{"type":"text","value":" (you can find this in the Storybook URL). There is also a height prop that you can configure to increase the height of the iframe. The example button below uses the following code:","position":{"start":{"line":6,"column":149,"offset":676},"end":{"line":6,"column":330,"offset":857},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":528},"end":{"line":6,"column":330,"offset":857},"indent":[]}},{"type":"code","lang":"html","meta":null,"value":"<StorybookComponent id=\"button--example\" height=\"75px\" />","position":{"start":{"line":8,"column":1,"offset":859},"end":{"line":10,"column":4,"offset":928},"indent":[1,1]}},{"type":"jsx","value":"<StorybookComponent id=\"button--example\" height=\"75px\" />","position":{"start":{"line":12,"column":1,"offset":930},"end":{"line":12,"column":58,"offset":987},"indent":[]}},{"type":"jsx","value":"<TabLinks defaultTab=\"React\">\n  <a href=\"http://example.com/vanillajs\" target=\"_blank\">Vanilla JS</a>\n  <a href=\"http://example.com/angular\" target=\"_blank\">Angular</a>\n</TabLinks>","position":{"start":{"line":14,"column":1,"offset":989},"end":{"line":17,"column":12,"offset":1169},"indent":[1,1,1]}},{"type":"code","lang":"html","meta":null,"value":"<Button>Click Here</Button>","position":{"start":{"line":19,"column":1,"offset":1171},"end":{"line":21,"column":4,"offset":1210},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"/cta/code/","children":[{"type":"text","value":"Next: Another Component Example","position":{"start":{"line":23,"column":2,"offset":1213},"end":{"line":23,"column":33,"offset":1244},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1212},"end":{"line":23,"column":46,"offset":1257},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":1212},"end":{"line":23,"column":46,"offset":1257},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Button Component\",\"description\":\"This is the button component code page\",\"tab\":\"Code\",\"tabOrder\":1,\"publishToStyleGuide\":true}","position":{"start":{"line":28,"column":1,"offset":1262},"end":{"line":28,"column":165,"offset":1426},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":28,"column":165,"offset":1426}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Button Component\",\n  \"description\": \"This is the button component code page\",\n  \"tab\": \"Code\",\n  \"tabOrder\": 1,\n  \"publishToStyleGuide\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar StorybookComponent = makeShortcode(\"StorybookComponent\");\nvar TabLinks = makeShortcode(\"TabLinks\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"This is an example of a Component Page\"), mdx(\"p\", null, \"It is similar to the other pages in that you can use Markdown/MDX, but it expects to find your component documentation in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/components\"), \" directory (although you can change that in your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" file by setting the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"componentLibPath\"), \"). There is also support for showing components from a Storybook build. By default it is set to pull from the default Storybook build path (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/storybook/iframe.html\"), \"), but that is configurable in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-config.js\"), \" by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"UILibPath\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" for your component is the ID that Storybook uses to identify the component in their iframe, which is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"COMPONENT_DIRECTORY--COMPONTENT_NAME\"), \" (you can find this in the Storybook URL). There is also a height prop that you can configure to increase the height of the iframe. The example button below uses the following code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<StorybookComponent id=\\\"button--example\\\" height=\\\"75px\\\" />\\n\")), mdx(StorybookComponent, {\n    id: \"button--example\",\n    height: \"75px\",\n    mdxType: \"StorybookComponent\"\n  }), mdx(TabLinks, {\n    defaultTab: \"React\",\n    mdxType: \"TabLinks\"\n  }, mdx(\"a\", {\n    href: \"http://example.com/vanillajs\",\n    target: \"_blank\"\n  }, \"Vanilla JS\"), mdx(\"a\", {\n    href: \"http://example.com/angular\",\n    target: \"_blank\"\n  }, \"Angular\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<Button>Click Here</Button>\\n\")), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/cta/code/\"\n  }), \"Next: Another Component Example\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Button Component\",\n  \"description\": \"This is the button component code page\",\n  \"tab\": \"Code\",\n  \"tabOrder\": 1,\n  \"publishToStyleGuide\": true\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst StorybookComponent = makeShortcode(\"StorybookComponent\");\nconst TabLinks = makeShortcode(\"TabLinks\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`This is an example of a Component Page`}</h2>\n    <p>{`It is similar to the other pages in that you can use Markdown/MDX, but it expects to find your component documentation in the `}<inlineCode parentName=\"p\">{`/components`}</inlineCode>{` directory (although you can change that in your `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode>{` file by setting the `}<inlineCode parentName=\"p\">{`componentLibPath`}</inlineCode>{`). There is also support for showing components from a Storybook build. By default it is set to pull from the default Storybook build path (`}<inlineCode parentName=\"p\">{`/storybook/iframe.html`}</inlineCode>{`), but that is configurable in `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode>{` by setting `}<inlineCode parentName=\"p\">{`UILibPath`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` for your component is the ID that Storybook uses to identify the component in their iframe, which is `}<inlineCode parentName=\"p\">{`COMPONENT_DIRECTORY--COMPONTENT_NAME`}</inlineCode>{` (you can find this in the Storybook URL). There is also a height prop that you can configure to increase the height of the iframe. The example button below uses the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<StorybookComponent id=\"button--example\" height=\"75px\" />\n`}</code></pre>\n    <StorybookComponent id=\"button--example\" height=\"75px\" mdxType=\"StorybookComponent\" />\n    <TabLinks defaultTab=\"React\" mdxType=\"TabLinks\">\n  <a href=\"http://example.com/vanillajs\" target=\"_blank\">Vanilla JS</a>\n  <a href=\"http://example.com/angular\" target=\"_blank\">Angular</a>\n    </TabLinks>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<Button>Click Here</Button>\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"/cta/code/\"\n      }}>{`Next: Another Component Example`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}